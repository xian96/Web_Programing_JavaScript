const Collections = require("../database/collections");
const posts = Collections.posts;
const animals = Collections.animals;
const ObjectID = require('mongodb').ObjectID;

async function getAll() {
    const postCollection = await posts();

    const allPosts = await postCollection.find({}).toArray();

    return allPosts;
}

/*
{
    "_id": "", //STRING OR OBJECT ID
    "title": "", // String title
    "author": "", // STRING OR OBJECT ID
    "content": "" // String
}
*/
async function addPost(title, author, content) {
    if (!title || typeof title !== 'string')
        throw "You must provide a title for your post";

    if (!author)
        throw "You must provide a title for your post";
    else if (!ObjectID.isValid(author)) {
        if (typeof author === 'string') {//author type is 'string' you'll have to convert into ObjectID 
            author = ObjectID(author);
        }
        else {
            throw `author:${author}, Must Be STRING OR OBJECT ID`;
        }
    }

    if (!content || typeof content !== 'string')
        throw "You must provide an content of post";

    const animalCollection = await animals();
    const animalGet = await animalCollection.findOne({ _id: ObjectID(author) });//make sure author animal is exist!
    if (animalGet === null)
        throw "No animal with that id";

    let newPost = {
        // _id: "", The **_id** field will be automatically generated by MongoDB
        "title": title,
        "content": content,
        "author": author// only store id in here!
    }
    const postCollection = await posts();
    const insertInfo = await postCollection.insertOne(newPost);
    if (insertInfo.insertedCount === 0)
        throw "Could not create animal";

    const newId = insertInfo.insertedId;

    const animalData = require("./animals");
    //add the post in to animals
    await animalData.addPostToAnimal(author, newId, title);

    //return the newly created post
    const post = await postCollection.findOne({ _id: ObjectID(newId) });
    return post;
}

async function getPostById(id) {
    if (!id)
        throw "You must provide a id for your post";
    else if (!ObjectID.isValid(id)) {
        if (typeof id === 'string') {//id type is 'string' you'll have to convert into ObjectID 
            id = ObjectID(id);
        }
        else {
            throw `id:${id}, Must Be STRING OR OBJECT ID`;
        }
    }

    const postCollection = await posts();
    const postGet = await postCollection.findOne({ _id: ObjectID(id) });
    if (postGet === null)
        throw "No post with that id";

    return postGet;
}

async function updatePost(id, newPost) {
    if (!id)
        throw "You must provide a id for your post";
    else if (!ObjectID.isValid(id)) {
        if (typeof id === 'string') {//id type is 'string' you'll have to convert into ObjectID 
            id = ObjectID(id);
        }
        else {
            throw `id:${id}, Must Be STRING OR OBJECT ID`;
        }
    }

    if (!newPost)
        throw "You must provide a newPost for your animal";
    if (typeof newPost !== 'object') {
        throw "You must provide a object for your newPost";
    }
    // {
    //     "newTitle": "new title",
    //     "newContent: "The new content of the post"
    // }
    const postCollection = await posts();
    const postGet = await postCollection.findOne({ _id: ObjectID(id) });

    var updatedPost = {
        "title": null,
        "content": null,
    };
    if (!newPost.newTitle && !newPost.newContent) {//either
        throw `no needed new info: "title": null, "newContent": null`;
    }
    else if (!newPost.newTitle) {//content only
        updatedPost = {
            "title": postGet.title,
            "content": newPost.newContent,
        };
    }
    else if (!newPost.newContent) {//tittle only
        updatedPost = {
            "title": newPost.newTitle,
            "content": postGet.content,
        };
    }
    else {//both have
        updatedPost = {
            "title": newPost.newTitle,
            "content": newPost.newContent,
        };
    }
    const updateInfo = await postCollection.updateOne({ _id: ObjectID(id) }, { $set: updatedPost });
    if (updateInfo.modifiedCount === 0) {
        throw `could not update animal with id:${id} successfully`;
    }

    return await this.getPostById(id);
}

async function removePost(id) {
    if (!id)
        throw "You must provide a id for your post";
    else if (!ObjectID.isValid(id)) {
        if (typeof id === 'string') {//id type is 'string' you'll have to convert into ObjectID 
            id = ObjectID(id);
        }
        else {
            throw `id:${id}, Must Be STRING OR OBJECT ID`;
        }
    }

    // const animalCollection = await animals();
    const postCollection = await posts();

    const removed = await postCollection.findOne({ _id: ObjectID(id) });

    //first update animal have this post
    const animalData = await require("./animals");
    // console.log(removed.author);
    await animalData.deletePostInAnimal(id, removed.author);

    //And then delete post:
    const deletionInfo = await postCollection.removeOne({ _id: ObjectID(id) });
    if (deletionInfo.deletedCount === 0) {
        throw `Could not delete animal with id of ${id}`;
    }

    const removeReturn = {
        "deleted": true,
        "data": removed,
    }
    return removeReturn;
}

module.exports = {
    addPost, getAll, getPostById, removePost, updatePost,
}
