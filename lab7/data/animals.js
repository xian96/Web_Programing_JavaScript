const Collections = require("../database/collections");
const animals = Collections.animals;
const posts = Collections.posts;
const postData = require("./posts");
ObjectID = require('mongodb').ObjectID;
/*
{
    "_id": "", //STRING OR OBJECT ID
    "name": "",
    "animalType": "",
    "likes": [], // Array of strings or Object IDs
    "posts": [] // Array of strings or Object IDs
}
*/
async function create(name, animalType) {
    if (!name || typeof name !== 'string')
        throw "You must provide a name for your animal";

    if (!animalType || typeof animalType !== 'string')
        throw "You must provide an animalType of animal";

    const animalCollection = await animals();

    let newAnimal = {
        // _id: "", The **_id** field will be automatically generated by MongoDB
        "name": name,
        "animalType": animalType,
        "likes": [],
        "posts": [],
    }

    const insertInfo = await animalCollection.insertOne(newAnimal);
    if (insertInfo.insertedCount === 0)
        throw "Could not create animal";

    const newId = insertInfo.insertedId;
    // console.log(typeof newId);
    const animal = await animalCollection.findOne({ _id: ObjectID(newId) });
    return animal;
}

async function getAll() {
    const animalCollection = await animals();

    const allAnimals = await animalCollection.find({}).toArray();

    return allAnimals;
}

// {
//     "_id": "507f1f77bcf86cd799439011", 
//     "name": "Mortimer",
//     "animalType": "Giraffe",
//     "likes": [
//         {
//             "_id": "a4f8512b9a734baf863ff33ffbabab2d",
//             "title": "Don't ask me how the weather is up here"
//         }
//     ],
//     "posts": [
//     {
//             "_id": "a4f8512b9a734baf863ff33ffbabab2d",
//             "title": "Don't ask me how the weather is up here"
//         }
//     ]
// }
async function getAnimalById(id) {
    if (!id)
        throw "You must provide a id for your post";
    else if (!ObjectID.isValid(id)) {
        if (typeof id === 'string') {//id type is 'string' you'll have to convert into ObjectID 
            id = ObjectID(id);
        }
        else {
            throw `id:${id}, Must Be STRING OR OBJECT ID`;
        }
    }

    const animalCollection = await animals();
    const animalGet = await animalCollection.findOne({ _id: ObjectID(id) });
    if (animalGet === null)
        throw "No animal with that id";

    return animalGet;
}

async function update(id, newInfo) {
    if (!id)
        throw "You must provide a id for your post";
    else if (!ObjectID.isValid(id)) {
        if (typeof id === 'string') {//id type is 'string' you'll have to convert into ObjectID 
            id = ObjectID(id);
        }
        else {
            throw `id:${id}, Must Be STRING OR OBJECT ID`;
        }
    }
    const animalCollection = await animals();
    const animal = await animalCollection.findOne({ _id: ObjectID(id) });

    if (!newInfo)
        throw "You must provide a newName for your animal";

    if (typeof newInfo !== 'object') {
        throw `You must provide a object for your animal Info`;
    }
    // {
    // "newName": "Maximums",
    // "newType": "Noble Giraffe",
    // }
    // you may submit this request with either newName, newType, or both!
    var updatedAnimal;
    const nameChage = false;
    if (!newInfo.hasOwnProperty('newName') && !newInfo.hasOwnProperty('newType')) {//either
        throw `empty new info`;
    }
    else if (!newInfo.hasOwnProperty('newName')) {//type
        updatedAnimal = {
            "name": animal.name,
            "animalType": newInfo['newType'],
        }
        nameChage = true;
    }
    else if (!newInfo.hasOwnProperty('newType')) {//name
        updatedAnimal = {
            "name": newInfo['newName'],
            "animalType": animal.animalType,
        }
    }
    else {//both
        updatedAnimal = {
            "name": newInfo['newName'],
            "animalType": newInfo['newType'],
        }
    }

    const updateInfo = await animalCollection.updateOne({ _id: ObjectID(id) }, { $set: updatedAnimal });
    // const updateInfo = await animalCollection.updateOne({ _id: ObjectID.createFromHexString(id) }, { $set: updatedAnimal });
    if (updateInfo.modifiedCount === 0) {
        throw `could not update animal with id:${id} successfully`;
    }

    //change all post animal name:
    if (nameChage) {
        postData.updateAllName();
    }

    return await this.getAnimalById(id);
}

async function updateAnimalPost(animalId, postId, postTittle) {
    console.log(animalId, postId, postTittle);    
    if (!animalId)
        throw "You must provide a animalId for your post";
    else if (!ObjectID.isValid(animalId)) {
        if (typeof animalId === 'string') {//animalId type is 'string' you'll have to convert into ObjectID 
            animalId = ObjectID(animalId);
        }
        else {
            throw `id:${animalId}, Must Be STRING OR OBJECT ID`;
        }
    }
    if (!postId)
        throw "You must provide a postid";
    else if (!ObjectID.isValid(postId)) {
        if (typeof animalId === 'string') {//animalId type is 'string' you'll have to convert into ObjectID 
            postId = ObjectID(postId);
        }
        else {
            throw `id:${postId}, Must Be STRING OR OBJECT ID`;
        }
    }
    if (!postTittle)
        throw "You must provide a postid";
    else if (!ObjectID.isValid(postTittle)) {
        if (typeof animalId === 'string') {//animalId type is 'string' you'll have to convert into ObjectID 
        postTittle = ObjectID(postTittle);
        }
        else {
            throw `id:${postTittle}, Must Be STRING OR OBJECT ID`;
        }
    }

    const animalCollection = await animals();
    const updateInfo = await animalCollection.updateOne({ _id: ObjectID(animalId) },
        { $push: { posts: { postid: postId, tittle: postTittle } } }
    );

    if (!updateInfo.modifiedCount) {
        throw `could not update animal post with animalId:${animalId} successfully`;
    }

    return await this.getAnimalById(animalId);
}

async function remove(id) {
    if (!id) throw "You must provide an id to search for";
    if (typeof id !== 'string') {// you'll have to convert into ObjectID 
        throw `id:${id} type is Type:${typeof id}. Need string`;
    }

    const animalCollection = await animals();
    const postCollection = await posts();

    const removed = await animalCollection.findOne({ _id: ObjectID(id) });

    // first delete all posts written by this animal:
    const animalPostAll = removed["posts"];
    // var postDeletionInfo;
    // animalPostAll.forEach(function (post) {
    //     // const removedPost = 
    //     // await postCollection.findOne({ _id: post["_id"] });//if post is added correctly this never throw.
    //     postDeletionInfo = await postCollection.removeOne({ _id: post["_id"] });
    //     if (postDeletionInfo.deletedCount === 0) {//one of post from this animal failed.
    //         throw `one of post from animal Id:${id} failed. Could not delete animal post with post id of ${post["_id"]}`;
    //     }
    // });

    // then delete animal:
    const deletionInfo = await animalCollection.removeOne({ _id: ObjectID(id) });

    if (deletionInfo.deletedCount === 0) {
        throw `Could not delete animal with id of ${id}`;
    }
    // {
    //     "deleted": true,
    //     "data": {
    //         "_id": "507f1f77bcf86cd799439011", 
    //         "name": "Mortimer",
    //         "animalType": "Giraffe",
    //         "likes": [
    //             {
    //                 "_id": "a4f8512b9a734baf863ff33ffbabab2d",
    //                 "title": "Don't ask me how the weather is up here"
    //             }
    //         ],
    //         "posts": [
    //         {
    //                 "_id": "a4f8512b9a734baf863ff33ffbabab2d",
    //                 "title": "Don't ask me how the weather is up here"
    //             }
    //         ]
    //     }
    // }  
    const removeReturn = {
        "deleted": true,
        "data": removed,
    }
    return removeReturn;
}
async function updateAllTitle() {
    //TODO:
}

async function updateAllAnimalPost() {
    //TODO:
}

module.exports = {
    create, getAll, getAnimalById, remove, update, updateAnimalPost, updateAllTitle, updateAllAnimalPost,
}