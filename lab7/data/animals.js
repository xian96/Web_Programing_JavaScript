const Collections = require("../database/collections");
const animals = Collections.animals;
const posts = Collections.posts;
ObjectID = require('mongodb').ObjectID;
/*
{
    "_id": "", //STRING OR OBJECT ID
    "name": "",
    "animalType": "",
    "likes": [], // Array of strings or Object IDs
    "posts": [] // Array of strings or Object IDs
}
*/
const exportedMethods = {
    async  create(name, animalType) {
        if (!name || typeof name !== 'string')
            throw "You must provide a name for your animal";

        if (!animalType || typeof animalType !== 'string')
            throw "You must provide an animalType of animal";

        const animalCollection = await animals();

        let newAnimal = {
            // _id: "", The **_id** field will be automatically generated by MongoDB
            "name": name,
            "animalType": animalType,
            "likes": [],
            "posts": [],
        }

        const insertInfo = await animalCollection.insertOne(newAnimal);
        if (insertInfo.insertedCount === 0)
            throw "Could not create animal";

        const newId = insertInfo.insertedId;
        // console.log(typeof newId);
        const animal = await animalCollection.findOne({ _id: ObjectID(newId) });
        return animal;
    }
    ,
    async  getAll() {
        const animalCollection = await animals();

        const allAnimals = await animalCollection.find({}).toArray();

        return allAnimals;
    }
    ,
    async  getAnimalById(id) {
        if (!id)
            throw "You must provide a id for your post";
        else if (!ObjectID.isValid(id)) {
            if (typeof id === 'string') {//id type is 'string' you'll have to convert into ObjectID 
                id = ObjectID(id);
            }
            else {
                throw `id:${id}, Must Be STRING OR OBJECT ID`;
            }
        }

        const animalCollection = await animals();
        const animalGet = await animalCollection.findOne({ _id: ObjectID(id) });
        if (animalGet === null)
            throw "No animal with that id";

        var animalWithDetail = {
            "_id": animalGet._id,
            "name": animalGet.name,
            "animalType": animalGet.animalType,
            "posts": [],
        }
        const postData = require("./posts");
        for (const element of animalGet.posts) {//async function await!
            // console.log(element._id);
            const eachPost = await postData.getPostById(element._id);
            animalWithDetail.posts.push(
                {
                    "_id": eachPost._id,
                    "title": eachPost.title
                }
            );
            // console.log("first: " + animalWithDetail.posts);
        }
        // console.log("\nlatter");

        return animalWithDetail;
    }
    ,
    async  update(id, newInfo) {
        if (!id)
            throw "You must provide a id for your post";
        else if (!ObjectID.isValid(id)) {
            if (typeof id === 'string') {//id type is 'string' you'll have to convert into ObjectID 
                id = ObjectID(id);
            }
            else {
                throw `id:${id}, Must Be STRING OR OBJECT ID`;
            }
        }
        const animalCollection = await animals();
        const animal = await animalCollection.findOne({ _id: ObjectID(id) });

        if (!newInfo)
            throw "You must provide a newName for your animal";

        if (typeof newInfo !== 'object') {
            throw `You must provide a object for your animal Info`;
        }
        // {
        // "newName": "Maximums",
        // "newType": "Noble Giraffe",
        // }
        // you may submit this request with either newName, newType, or both!
        var updatedAnimal;
        if (!newInfo.hasOwnProperty('newName') && !newInfo.hasOwnProperty('newType')) {//either
            throw `no needed new info`;
        }
        else if (!newInfo.hasOwnProperty('newName')) {//type
            updatedAnimal = {
                "name": animal.name,
                "animalType": newInfo['newType'],
            }
        }
        else if (!newInfo.hasOwnProperty('newType')) {//name
            updatedAnimal = {
                "name": newInfo['newName'],
                "animalType": animal.animalType,
            }
        }
        else {//both
            updatedAnimal = {
                "name": newInfo['newName'],
                "animalType": newInfo['newType'],
            }
        }

        const updateInfo = await animalCollection.updateOne({ _id: ObjectID(id) }, { $set: updatedAnimal });
        if (updateInfo.modifiedCount === 0) {
            throw `could not update animal with id:${id} successfully`;
        }

        return await this.getAnimalById(id);
    }
    ,
    async addPostToAnimal(animalId, postId, postTittle) {
        if (!animalId)
            throw "You must provide a animalId for your post";
        else if (!ObjectID.isValid(animalId)) {
            if (typeof animalId === 'string') {//animalId type is 'string' you'll have to convert into ObjectID 
                animalId = ObjectID(animalId);
            }
            else {
                throw `id:${animalId}, Must Be STRING OR OBJECT ID`;
            }
        }
        if (!postId)
            throw "You must provide a postid";
        else if (!ObjectID.isValid(postId)) {
            if (typeof animalId === 'string') {//animalId type is 'string' you'll have to convert into ObjectID 
                postId = ObjectID(postId);
            }
            else {
                throw `id:${postId}, Must Be STRING OR OBJECT ID`;
            }
        }
        if (!postTittle)
            throw "You must provide a postid";
        else if (typeof postTittle !== 'string') {//animalId type is 'string' you'll have to convert into ObjectID 
            throw "You must provide a string postTittle";
        }

        // console.log(animalId, postId, postTittle);

        const animalCollection = await animals();
        const updateInfo = await animalCollection.updateOne({ _id: ObjectID(animalId) },
            { $push: { posts: { _id:  ObjectID(postId) } } }//just put id in here!
        );

        if (!updateInfo.modifiedCount) {
            throw `could not update animal post with animalId:${animalId} successfully`;
        }

        return true;
    }
    ,
    async  remove(id) {
        if (!id) throw "You must provide an id to search for";
        if (typeof id !== 'string') {// you'll have to convert into ObjectID 
            throw `id:${id} type is Type:${typeof id}. Need string`;
        }

        const animalCollection = await animals();
        const postCollection = await posts();

        const removed = await animalCollection.findOne({ _id: ObjectID(id) });

        // first delete all posts written by this animal:
        const animalPostAll = removed.posts;
        var postDeletionInfo;
        animalPostAll.forEach(async (post) => {
            postDeletionInfo = await postCollection.removeOne({ _id: post._id });
            if (postDeletionInfo.deletedCount === 0) {//one of post from this animal failed.
                throw `one of post from animal Id:${id} failed. Could not delete animal post with post id of ${post._id}`;
            }
        });

        // then delete animal:
        const deletionInfo = await animalCollection.removeOne({ _id: ObjectID(id) });

        if (deletionInfo.deletedCount === 0) {
            throw `Could not delete animal with id of ${id}`;
        }

        const removeReturn = {
            "deleted": true,
            "data": removed,
        }
        return removeReturn;
    }
    ,
    async  deletePostInAnimal(postId, authorId) {
        if (!postId)
            throw "You must provide a id for your postId";
        else if (!ObjectID.isValid(postId)) {
            if (typeof postId === 'string') {//id type is 'string' you'll have to convert into ObjectID 
                postId = ObjectID(postId);
            }
            else {
                throw `postId:${postId}, Must Be STRING OR OBJECT ID`;
            }
        }

        if (!authorId)
            throw "You must provide a id for your authorId";
        else if (!ObjectID.isValid(authorId)) {
            if (typeof authorId === 'string') {//id type is 'string' you'll have to convert into ObjectID 
                authorId = ObjectID(authorId);
            }
            else {
                throw `authorId:${authorId}, Must Be STRING OR OBJECT ID`;
            }
        }

        const animalCollection = await animals();
        const animalGet = await animalCollection.findOne({ _id: ObjectID(authorId) });
        if (animalGet === null)
            throw "No animal with that id";

        // console.log(current);
        const updateInfo = await animalCollection.updateOne({ _id: ObjectID(authorId) }, { $pull: { posts: { _id: ObjectID(postId) } } });
        if (!updateInfo.matchedCount && !updateInfo.modifiedCount)
            throw 'Update failed';

        return true;
    }
}

module.exports = exportedMethods;