const Collections = require("../database/collections");
const posts = Collections.posts;
const animal = Collections.animals;
const ObjectId = require('mongodb').ObjectID;
// {
//     "_id": "507f1f77bcf86cd799439011", 
//     "name": "Mortimer",
//     "animalType": "Giraffe",
//     "likes": [
//         {
//             "_id": "a4f8512b9a734baf863ff33ffbabab2d",
//             "title": "Don't ask me how the weather is up here"
//         }
//     ],
//     "posts": [
//     {
//             "_id": "a4f8512b9a734baf863ff33ffbabab2d",
//             "title": "Don't ask me how the weather is up here"
//         }
//     ]
// }
async function getAll() {
    const postCollection = await posts();

    const allPosts = await postCollection.find({}).toArray();

    return allPosts;
}

/*
{
    "_id": "", //STRING OR OBJECT ID
    "title": "", // String title
    "author": "", // STRING OR OBJECT ID
    "content": "" // String
}
*/
async function addPost(title, author, content) {
    if (!title || typeof title !== 'string')
        throw "You must provide a title for your post";

    if (!author)
        throw "You must provide a title for your post";
    else if (!ObjectID.isValid(author)) {
        if (typeof author === 'string') {//author type is 'string' you'll have to convert into ObjectID 
            author = ObjectId(author);
        }
        else {
            throw `author:${author}, Must Be STRING OR OBJECT ID`;
        }
    }

    if (!content || typeof content !== 'string')
        throw "You must provide an content of post";

    const postCollection = await posts();

    let newPost = {
        // _id: "", The **_id** field will be automatically generated by MongoDB
        "title": title,
        "author": author,
        "content": content,
    }

    const insertInfo = await postCollection.insertOne(newPost);
    if (insertInfo.insertedCount === 0)
        throw "Could not create animal";

    const newId = insertInfo.insertedId;
    // console.log(typeof newId);
    const post = await animalCollection.findOne({ _id: newId });

    //add the post in to animals
    const ainmalId = author;
    const postId = post._id;
    const postTittle = content;
    await updateAnimalPost(ainmalId, postId, postTittle);

    //return the newly created post
    return post;
}

async function getPostById(id) {
    if (!id)
        throw "You must provide a id for your post";
    else if (!ObjectID.isValid(id)) {
        if (typeof id === 'string') {//id type is 'string' you'll have to convert into ObjectID 
            id = ObjectId(id);
        }
        else {
            throw `id:${id}, Must Be STRING OR OBJECT ID`;
        }
    }

    const postCollection = await posts();
    const postGet = await postCollection.findOne({ _id: id });
    if (postGet === null)
        throw "No animal with that id";

    return postGet;
}

async function updatePost(id, newPost) {
    if (!id)
        throw "You must provide a id for your post";
    else if (!ObjectID.isValid(id)) {
        if (typeof id === 'string') {//id type is 'string' you'll have to convert into ObjectID 
            id = ObjectId(id);
        }
        else {
            throw `id:${id}, Must Be STRING OR OBJECT ID`;
        }
    }

    if (!newPost)
        throw "You must provide a newPost for your animal";

    if (typeof newPost !== 'object') {
        throw "You must provide a object for your newPost";
    }
    // {
    //     "newTitle": "new title",
    //     "newContent: "The new content of the post"
    // }
    const postCollection = await posts();
    const postGet = await postCollection.findOne({ _id: id });

    const updatedPost;
    if (!newPost.hasOwnProperty('newTitle') && !newPost.hasOwnProperty('newContent')) {//either
        updatedAnimal = {
            "title": postGet.title,
            "content": postGet.content,
        }
    }
    else if (!newPost.hasOwnProperty('newTitle')) {//content only
        updatedAnimal = {
            "title": postGet.title,
            "content": newPost.content,
        }
    }
    else if (!newPost.hasOwnProperty('newContent')) {//tittle only
        updatedAnimal = {
            "title": newPost.title,
            "content": postGet.content,
        }
    }
    else {//both have
        updatedAnimal = {
            "title": newPost['title'],
            "content": newPost['content'],
        }
    }

    const updateInfo = await postCollection.updateOne({ _id: id }, { $set: updatedPost });
    // const updateInfo = await animalCollection.updateOne({ _id: ObjectId.createFromHexString(id) }, { $set: updatedAnimal });
    if (updateInfo.modifiedCount === 0) {
        throw `could not update animal with id:${id} successfully`;
    }

    return await this.get(id);
}

async function remove(id) {
    if (!id) throw "You must provide an id to search for";
    if (typeof id !== 'string') {// you'll have to convert into ObjectID 
        throw `id:${id} type is Type:${typeof id}. Need string`;
    }

    const animalCollection = await animals();

    const removed = await animalCollection.findOne({ _id: ObjectId(id) });
    const deletionInfo = await animalCollection.removeOne({ _id: ObjectId(id) });//deleteOne?remove?delete? method i don't have here
    // const removed = await animalCollection.findOne({ _id: ObjectId.createFromHexString(id) });
    // const deletionInfo = await animalCollection.removeOne({ _id: ObjectId.createFromHexString(id) });//deleteOne?remove?delete? method i don't have here

    if (deletionInfo.deletedCount === 0) {
        throw `Could not delete animal with id of ${id}`;
    }
    return removed;
}

module.exports = {
    addPost, getAll, getPostById, remove, updatePost
}