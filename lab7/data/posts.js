const Collections = require("../database/collections");
const animals = Collections.animals;
const ObjectId = require('mongodb').ObjectID;
/*
{
    "_id": "", //STRING OR OBJECT ID
    "title": "", // String title
    "author": "", // STRING OR OBJECT ID
    "content": "" // String
}
*/
async function create(title, content) {
    if (!title || typeof title !== 'string')
        throw "You must provide a title for your post";

    if (!content || typeof content !== 'string')
        throw "You must provide an content of post";

    const animalCollection = await animals();

    let newAnimal = {
        // _id: "", The **_id** field will be automatically generated by MongoDB
        "title": title,
        "content": content
    }

    const insertInfo = await animalCollection.insertOne(newAnimal);
    if (insertInfo.insertedCount === 0)
        throw "Could not create animal";

    const newId = insertInfo.insertedId;
    // console.log(typeof newId);
    const animal = await animalCollection.findOne({ _id: newId });
    return animal;
}

async function getAll() {
    const animalCollection = await animals();

    const allAnimals = await animalCollection.find({}).toArray();

    return allAnimals;
}
// {
//     "_id": "507f1f77bcf86cd799439011", 
//     "name": "Mortimer",
//     "animalType": "Giraffe",
//     "likes": [
//         {
//             "_id": "a4f8512b9a734baf863ff33ffbabab2d",
//             "title": "Don't ask me how the weather is up here"
//         }
//     ],
//     "posts": [
//     {
//             "_id": "a4f8512b9a734baf863ff33ffbabab2d",
//             "title": "Don't ask me how the weather is up here"
//         }
//     ]
// }
async function get(id) {
    if (!id)
        throw "You must provide an id to search for";
    if (typeof id !== 'string') {// you'll have to convert into ObjectID 
        throw `id:${id} type is Type:${typeof id}. Need string type`;
    }

    const animalCollection = await animals();
    const animalGet = await animalCollection.findOne({ _id: ObjectId(id) });
    if (animalGet === null)
        throw "No animal with that id";

    return animalGet;
}


async function remove(id) {
    if (!id) throw "You must provide an id to search for";
    if (typeof id !== 'string') {// you'll have to convert into ObjectID 
        throw `id:${id} type is Type:${typeof id}. Need string`;
    }

    const animalCollection = await animals();

    const removed = await animalCollection.findOne({ _id: ObjectId(id) });
    const deletionInfo = await animalCollection.removeOne({ _id: ObjectId(id) });//deleteOne?remove?delete? method i don't have here
    // const removed = await animalCollection.findOne({ _id: ObjectId.createFromHexString(id) });
    // const deletionInfo = await animalCollection.removeOne({ _id: ObjectId.createFromHexString(id) });//deleteOne?remove?delete? method i don't have here

    if (deletionInfo.deletedCount === 0) {
        throw `Could not delete animal with id of ${id}`;
    }
    return removed;
}

async function rename(id, newName) {
    if (!id)
        throw "You must provide an id to search for";
    if (typeof id !== 'string') {// you'll have to convert into ObjectID 
        throw "You must provide a string for your animal id";
    }

    if (!newName)
        throw "You must provide a newName for your animal";

    if (typeof newName !== 'string') {
        throw "You must provide a string for your animal newName";
    }

    const animalCollection = await animals();
    const updatedAnimal = {
        name: newName,
    };

    const updateInfo = await animalCollection.updateOne({ _id: ObjectId(id) }, { $set: updatedAnimal });
    // const updateInfo = await animalCollection.updateOne({ _id: ObjectId.createFromHexString(id) }, { $set: updatedAnimal });
    if (updateInfo.modifiedCount === 0) {
        throw `could not update animal with id:${id} successfully`;
    }

    return await this.get(id);
}

module.exports = {
    create, getAll, get, remove, rename
}